version: "3.7"

services:
  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage.
  dagster_postgresql:
    image: postgres:11
    container_name: dagster_postgresql
    environment:
      POSTGRES_USER: "${DAGSTER_POSTGRES_USER}"
      POSTGRES_PASSWORD: "${DAGSTER_POSTGRES_PASSWORD}"
      POSTGRES_DB: "${DAGSTER_POSTGRES_DB}"
    healthcheck:
      test: "PGPASSWORD=${DAGSTER_POSTGRES_PASSWORD} pg_isready -h 127.0.0.1 -U ${DAGSTER_POSTGRES_USER} -d ${DAGSTER_POSTGRES_DB}"
    networks:
      - dagster_network

  # This service runs the postgis DB used to publish datasets, either via GeoServer or REST services,
  # and to perform data transformation
  ipl_postgis:
    image: postgis/postgis:${IPL_POSTGIS_VERSION_TAG}
    container_name: ipl_postgis
    volumes:
      - ./geo-db-data:/var/lib/postgresql
    ports:
      - ${IPL_POSTGRES_PORT}:5432
    restart: on-failure
    healthcheck:
      test: "PGPASSWORD=${IPL_POSTGRES_PASSWORD} pg_isready -h 127.0.0.1 -U ${IPL_POSTGRES_USER} -d ${IPL_POSTGRES_DB}"
      interval: 5s
      timeout: 3s
      retries: 12
    environment:
      POSTGRES_USER: "${IPL_POSTGRES_USER}"
      POSTGRES_PASSWORD: "${IPL_POSTGRES_PASSWORD}"
      POSTGRES_DB: "${IPL_POSTGRES_DB}"
    networks:
      - dagster_network

  # This service runs the gRPC server that loads your user code, in both dagster-webserver
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by 
  # dagster-webserver.
  dagster_pipeline:
    build:
      context: .
      dockerfile: ./pipeline.Dockerfile
    container_name: dagster_pipeline
    image: "${DAGSTER_CURRENT_IMAGE}"
    restart: always
    environment:
      - DAGSTER_POSTGRES_USER
      - DAGSTER_POSTGRES_PASSWORD
      - DAGSTER_POSTGRES_DB
      - IPL_LAMASSU_INTERNAL_BASE_URL
      - IPL_POSTGRES_HOST
      - IPL_POSTGRES_USER
      - IPL_POSTGRES_PASSWORD
      - IPL_POSTGRES_DB
      - IPL_POSTGRES_PORT
      # Variables required for GTFS-Import
      - IPL_GTFS_IMPORTER_GTFS_DOWNLOAD_URL
      - IPL_GTFS_IMPORTER_GTFS_DOWNLOAD_USER_AGENT
      - IPL_GTFS_IMPORTER_IMAGE
      - IPL_GTFS_IMPORTER_NETWORK
      - IPL_GTFS_DB_POSTGRES_HOST
      - IPL_GTFS_DB_POSTGRES_USER
      - IPL_GTFS_DB_POSTGRES_PASSWORD
      - IPL_GTFS_DB_POSTGRES_DB
      - IPL_GTFS_DB_POSTGRES_DB_PREFIX
      - IPL_GTFS_DB_POSTGREST_USER
      - IPL_GTFS_DB_POSTGREST_PASSWORD
      # Required to mount volumes for docker-in-docker executions
      - IPL_GTFS_IMPORTER_HOST_CUSTOM_SCRIPTS_DIR=${PWD}/etc/gtfs/
      - IPL_GTFS_IMPORTER_HOST_GTFS_OUTPUT_DIR=${PWD}/var/gtfs/
      - RADVIS_WFS_USER
      - RADVIS_WFS_PASSWORD
    networks:
      - dagster_network
    volumes:
      - /tmp/io_manager_storage:/tmp/io_manager_storage
      - ./var/www/:/var/www
      - ./var/dagster/storage:/opt/dagster/dagster_home/storage
      # Make docker client accessible so we can start containers in jobs
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD-SHELL", "/bin/bash", "printf", "'GET / HTTP/1.1\n\n'", ">/dev/tcp/127.0.0.1/4000"]
      timeout: 1s
      interval: 3s
      start_period: 2s
      retries: 15
   
  # This service runs dagster-webserver (dagit), which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from dagster-webserver
  # will be put on a queue and later dequeued and launched by dagster-daemon.
  dagster_dagit:
    build:
      context: .
      dockerfile: ./dagster.Dockerfile
      target: dagit
    container_name: dagster_dagit
    ports:
      - "3000:3000"
    environment:
      - DAGSTER_POSTGRES_USER
      - DAGSTER_POSTGRES_PASSWORD
      - DAGSTER_POSTGRES_DB
    volumes:
      - /tmp/io_manager_storage:/tmp/io_manager_storage
      - ./var/dagster/storage:/opt/dagster/dagster_home/storage
    networks:
      - dagster_network
    depends_on:
      dagster_postgresql:
        condition: service_healthy
      dagster_pipeline:
        condition: service_healthy

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  dagster_daemon:
    build:
      context: .
      dockerfile: ./dagster.Dockerfile
      target: daemon
    container_name: dagster_daemon
    restart: on-failure
    environment:
      - DAGSTER_POSTGRES_USER
      - DAGSTER_POSTGRES_PASSWORD
      - DAGSTER_POSTGRES_DB
    volumes:
      - /tmp/io_manager_storage:/tmp/io_manager_storage
      - ./var/dagster/storage:/opt/dagster/dagster_home/storage
    networks:
      - dagster_network
    depends_on:
      dagster_postgresql:
        condition: service_healthy
      dagster_pipeline:
        condition: service_healthy

networks:
  dagster_network:
    driver: bridge
    name: dagster_network
